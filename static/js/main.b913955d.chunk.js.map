{"version":3,"sources":["components/Note.js","components/NoteList.js","App.js","serviceWorker.js","index.js"],"names":["Note","react_default","a","createElement","className","this","props","text","Component","NoteList","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","title","noteText","notes","btnText","push","setState","textInput","focus","event","key","addNote","target","value","console","log","length","_this2","map","val","components_Note","type","ref","input","onChange","updateNoteText","onKeyPress","handleKeyPress","bind","placeholder","onClick","App","notesList","components_NoteList","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b913955d.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Note extends Component {\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className=\"note\">\r\n\t\t\t\t<div className=\"noteText\">{this.props.text}</div>\r\n\t\t\t\t<button className=\"btn\">R</button>\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default Note;","import React, { Component } from 'react';\r\nimport Note from './Note';\r\n\r\nclass NoteList extends Component {\r\n\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\ttitle: this.props.title,\r\n\t\t\tnoteText: '',\r\n\t\t\tnotes: [],\r\n\t\t\tbtnText: '+ Add a task'\r\n\t\t}\r\n\t}\r\n\r\n\taddNote() {\r\n\t\tif (this.state.noteText === '') {return}\r\n\r\n\t\tthis.state.notes.push(this.state.noteText);\r\n\t\tthis.setState({noteText: '', btnText: '+ Add another task' });\r\n\t\tthis.textInput.focus();\r\n\t}\r\n\r\n\thandleKeyPress(event) {\r\n\t\tif (event.key === 'Enter') {\r\n\t\t\tthis.addNote();\r\n\t\t}\r\n\t}\r\n\r\n\tupdateNoteText(noteText) {\r\n\t\tthis.setState({noteText: noteText.target.value});\r\n\t}\r\n\r\n\tgetName() {\r\n\t\tconsole.log(this.state.notes.length);\r\n\t\treturn this.state.notes.length > 0 ? \"another\" : \"a\";\r\n\t}\r\n\r\n\trender() {\r\n\t\tlet notes = this.state.notes.map((val, key) => {\r\n      \t\treturn <Note key={key} text={val} />\r\n    \t});\r\n\r\n\t\treturn (\r\n\t\t\t<div className=\"noteList\">\r\n\t\t\t\t<div className=\"noteListTitle\">{this.state.title}</div>\r\n\t\t\t\t{notes}\r\n\t\t\t\t<input type=\"text\"\r\n\t\t\t\t\tref={((input) => {this.textInput = input})}\r\n\t\t\t\t\tclassName=\"textInput\"\r\n\t\t\t\t\tvalue={this.state.noteText}\r\n\t\t\t\t\tonChange={noteText => this.updateNoteText(noteText)}\r\n\t\t\t\t\tonKeyPress={this.handleKeyPress.bind(this)}\r\n\t\t\t\t\tplaceholder=\"Add new task\"\r\n\t\t\t\t\t/>\r\n\t\t\t\t<div className=\"btn\" onClick={this.addNote.bind(this)}>{this.state.btnText}</div>\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default NoteList;","import React, { Component } from 'react';\nimport NoteList from './components/NoteList';\nimport './App.css';\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      noteText: '',\n      notesList: []\n    }\n  }\n\n  renderNoteList(title) {\n    return <NoteList value={title} />;\n  }\n\n  render() {\n\n    let notesList = this.state.notesList.map((val, key) => {\n      return <NoteList key={key} text={val} />\n    });\n\n\n    return (\n      <div className=\"container\">\n        <div className=\"header\">Sample Todo Application</div>\n        <div className=\"body\">\n          <NoteList title=\"Todo\"/>\n          <NoteList title=\"Doing\"/>\n          <NoteList title=\"Done\"/>\n          {notesList}\n          <div className=\"btn\">+ Add another list</div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}